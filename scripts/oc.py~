#!/usr/bin/env python

import rospy
from nav_msgs.msg import OccupancyGrid
import numpy
from random import randint
from sensor_msgs.msg import LaserScan
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib
from actionlib_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion


class Example:
    def __init__(self):
	
	self.origin = {}
	self.origin['x'] = 0
	self.origin['y'] = 0
	self.resolution = 0.2
	self.ogm = []
	self.ogm_info = 0
	self.width=0
	self.height=0
	self.x=0
	self.y=0
	
	self.goal_sent = False
	# What to do if shut down (e.g. Ctrl-C or failure)
	rospy.on_shutdown(self.shutdown)
	# Tell the action client that we want to spin a thread by default
	self.move_base = actionlib.SimpleActionClient("move_base", MoveBaseAction)
	rospy.loginfo("Wait for the action server to come up")
	# Allow up to 5 seconds for the action server to come up
	self.move_base.wait_for_server(rospy.Duration(5))
        
        rospy.Subscriber('/map',OccupancyGrid, self.readMap)

    def readMap(self, data):
	print 'Width is :'+str(data.info.width)
	print 'Height is :'+str(data.info.height)
	print str(len(data.data))	
	self.width=data.info.width
	self.height=data.info.height
	
	self.ogm_info = data.info
	self.ogm = numpy.zeros((data.info.width, data.info.height), dtype = numpy.int)
	for x in range(0, data.info.width):
	   for y in range(0, data.info.height):
	   	self.ogm[x][y] = data.data[x + data.info.width * y]
	self.resolution = data.info.resolution
	self.origin['x'] = data.info.origin.position.x
	self.origin['y'] = data.info.origin.position.y
	print len(self.ogm)	
    
    def select_target(self):
	if len(self.ogm)>0:
		self.x=randint(0,self.width-1)
		self.y=randint(0,self.height-1)
	
		while self.ogm[self.x][self.y]!=0:
		    self.x=randint(0,self.width-1)
		    self.y=randint(0,self.height-1)
		
		# Send a goal
		self.goal_sent = True
		goal = MoveBaseGoal()
		goal.target_pose.header.frame_id = 'map'
		goal.target_pose.header.stamp = rospy.Time.now()
		goal.target_pose.pose = Pose(Point(self.x, self.y, 0.000),Quaternion(0, 0, 0, 1))
		                             
		# Start moving
		self.move_base.send_goal(goal)
		# Allow TurtleBot up to 60 seconds to complete task
		success = self.move_base.wait_for_result(rospy.Duration(60)) 
	
		state = self.move_base.get_state()
		result = False

		if success and state == GoalStatus.SUCCEEDED:
		    # We made it!
		    result = True
		else:
		    self.move_base.cancel_goal()

		self.goal_sent = False
		

		print(randint(0,self.x)*self.resolution+self.origin['x'])
		print(randint(0,self.y)*self.resolution+self.origin['y'])
		print 'Success:'+str(success)
		print 'State:'+str(state)

		return result



		
    def shutdown(self):
        if self.goal_sent:
            self.move_base.cancel_goal()
        rospy.loginfo("Stop")
        rospy.sleep(1)

if __name__ == '__main__':
    try:
        # Init ROS node
        rospy.init_node('service_example')

        # Instatiated the class
        NC = Example()

        # Wait
        #rospy.spin()
	
	while not rospy.is_shutdown():
		success=NC.select_target()
		
		
		if success:
            		rospy.loginfo("Hooray, reached the desired pose")
                else:
            		rospy.loginfo("The base failed to reach the desired pose")


       	        # Sleep to give the last log messages time to be sent
                rospy.sleep(1)
		
    except rospy.ROSInterruptException:
        pass
